library(nnet)
# Test
library(nnet)
library(neuralnet)
install.packages("neuralnet")
library(nnet)
library(neuralnet)
# Test
library(nnet)
library(neuralnet)
# Test
trainData <- cbind(iris[, 1:4], class.ind(iris$Species))
View(trainData)
?iris
library(nnet)
library(neuralnet)
summary(iris)
# Start off with a Basic dataset - the good ol - IRIS
trainData <- cbind(iris[, 1:4], class.ind(iris$Species))
# Column Bind the 1 to 4 Columns Range
# Create a INDEX using the iris$Species Variable
#
library(nnet)
library(neuralnet)
summary(iris)
str(iris)
# Start off with a Basic dataset - the good ol - IRIS
trainData <- cbind(iris[, 1:4], class.ind(iris$Species))
# Column Bind the 1 to 4 Columns Range
# Create a INDEX using the iris$Species Variable
#
library(nnet)
library(neuralnet)
summary(iris)
str(iris)
show(iris)
# Start off with a Basic dataset - the good ol - IRIS
trainData <- cbind(iris[, 1:4], class.ind(iris$Species))
# Column Bind the 1 to 4 Columns Range
# Create a INDEX using the iris$Species Variable
#
library(nnet)
library(neuralnet)
show(iris)
str(iris)
# Start off with a Basic dataset - the good ol - IRIS
trainData <- cbind(iris[, 1:4], class.ind(iris$Species))
# Column Bind the 1 to 4 Columns Range
# Create a INDEX using the iris$Species Variable
#
library(nnet)
library(neuralnet)
head(iris)
str(iris)
# Start off with a Basic dataset - the good ol - IRIS
trainData <- cbind(iris[, 1:4], class.ind(iris$Species))
# Column Bind the 1 to 4 Columns Range
# Create a INDEX using the iris$Species Variable
#
#Building ANN
library(neuralnet)
ann<-neuralnet(setosa + versicolor + virginica ~ Sepal.Length + Sepal.Width + Petal.Length
+ Petal.Width,
trainData[samp,], hidden = c(5,5), threshold = 0.01,
stepmax = 1e+05, algorithm = "rprop+",
err.fct = "sse", act.fct = "logistic")
# Create a SAMPLE Creation helper
samp<-c(sample(1:50,25), sample(51:100,25), sample(101:150,25))
## Code Source -- https://rweb.stat.umn.edu/R/library/nnet/html/predict.nnet.html
#Building ANN
library(neuralnet)
ann<-neuralnet(setosa + versicolor + virginica ~ Sepal.Length + Sepal.Width + Petal.Length
+ Petal.Width,
trainData[samp,], hidden = c(5,5), threshold = 0.01,
stepmax = 1e+05, algorithm = "rprop+",
err.fct = "sse", act.fct = "logistic")
#Plotting the Model
library(ggplot2)
install.packages("ggplot2")
iris$Species.Class <- 0
iris$Species.Class[iris$Species == "versicolor"] <- 1
iris$Species.Class[iris$Species == "virginica"] <- 2
nn.1 <- neuralnet(Species.Class ~ Sepal.Width + Sepal.Length + Petal.Width + Petal.Length,
data = iris, hidden = 2)
plot(nn.1)
nn.1
iris$Species.Class <- 0
iris$Species.Class[iris$Species == "versicolor"] <- 1
iris$Species.Class[iris$Species == "virginica"] <- 2
nn.1 <- neuralnet(Species.Class ~ Sepal.Width + Sepal.Length + Petal.Width + Petal.Length,
data = iris, hidden = 2)
plot(nn.1)
nn.1
#Building ANN
library(neuralnet)
ann<-neuralnet(setosa + versicolor + virginica ~ Sepal.Length + Sepal.Width + Petal.Length
+ Petal.Width,
trainData[samp,], hidden = c(5,5), threshold = 0.01,
stepmax = 1e+05, algorithm = "rprop+",
err.fct = "sse", act.fct = "logistic")
#Plotting the Model
library(ggplot2)
plot.nn(ann)
#Building ANN
library(neuralnet)
ann<-neuralnet(setosa + versicolor + virginica ~ Sepal.Length + Sepal.Width + Petal.Length
+ Petal.Width,
trainData[samp,], hidden = c(5,5), threshold = 0.01,
stepmax = 1e+05, algorithm = "rprop+",
err.fct = "sse", act.fct = "logistic")
#Plotting the Model
#
plot(nn)
#Building ANN
library(neuralnet)
nn_iris<-neuralnet(setosa + versicolor + virginica ~ Sepal.Length + Sepal.Width + Petal.Length
+ Petal.Width,
trainData[samp,], hidden = c(5,5), threshold = 0.01,
stepmax = 1e+05, algorithm = "rprop+",
err.fct = "sse", act.fct = "logistic")
#Plotting the Model
#
plot(nn_iris)
nn_iris
library(nnet)
library(neuralnet)
head(iris)
str(iris)
# Start off with a Basic dataset - the good ol - IRIS
trainData <- cbind(iris[, 1:4], class.ind(iris$Species))
# Column Bind the 1 to 4 Columns Range
# Create a INDEX using the iris$Species Variable
#
#Building ANN
library(neuralnet)
nn_iris<-neuralnet(setosa + versicolor + virginica ~ Sepal.Length + Sepal.Width + Petal.Length
+ Petal.Width,
trainData[samp,], hidden = c(5,5), threshold = 0.01,
stepmax = 1e+05, algorithm = "rprop+",
err.fct = "sse", act.fct = "logistic")
#Plotting the Model
#
plot(nn_iris)
nn_iris
# Another simpler code chunk ... Basic Classifier NN
iris$Species.Class <- 0
iris$Species.Class[iris$Species == "versicolor"] <- 1
iris$Species.Class[iris$Species == "virginica"] <- 2
nn.1 <- neuralnet(Species.Class ~ Sepal.Width + Sepal.Length + Petal.Width + Petal.Length,
data = iris, hidden = 2)
plot(nn.1)
nn.1
library(neuralnet)
AND <- c(rep(0,7),1)
OR <- c(0,rep(1,7))
print(AND)
#binary.data <- data.frame(expand.grid(c(0,1), c(0,1), c(0,1)), AND, OR)
#print(net <- neuralnet(AND+OR~Var1+Var2+Var3, binary.data, hidden=0,
#rep=10, err.fct="ce", linear.output=FALSE))
AND <- c(rep(0,7),1)
OR <- c(0,rep(1,7))
print(AND)
print(OR)
#binary.data <- data.frame(expand.grid(c(0,1), c(0,1), c(0,1)), AND, OR)
#print(net <- neuralnet(AND+OR~Var1+Var2+Var3, binary.data, hidden=0,
#rep=10, err.fct="ce", linear.output=FALSE))
binary_data <- data.frame(expand.grid(c(0,1), c(0,1), c(0,1)), AND, OR)
print(binary_data)
#print(net <- neuralnet(AND+OR~Var1+Var2+Var3, binary.data, hidden=0,
#rep=10, err.fct="ce", linear.output=FALSE))
binary_data <- data.frame(expand.grid(c(0,1), c(0,1), c(0,1)), AND, OR)
print(binary_data)
structure(binary_data)
#print(net <- neuralnet(AND+OR~Var1+Var2+Var3, binary.data, hidden=0,
#rep=10, err.fct="ce", linear.output=FALSE))
## Below chunks of code - SOURCE --- CRAN Examples - Package - library(neuralnet)
#
# Set Seed -- ensure reproducible results
set.seed(123)
#
AND <- c(rep(0,7),1)
OR <- c(0,rep(1,7))
print(AND)
print(OR)
binary_data <- data.frame(expand.grid(c(0,1), c(0,1), c(0,1)), AND, OR)
print(binary_data)
structure(binary_data)
#print(net <- neuralnet(AND+OR~Var1+Var2+Var3, binary.data, hidden=0,
#rep=10, err.fct="ce", linear.output=FALSE))
binary_data <- data.frame(expand.grid(c(0,4), c(0,1), c(0,1)), AND, OR)
print(binary_data)
structure(binary_data)
#print(net <- neuralnet(AND+OR~Var1+Var2+Var3, binary.data, hidden=0,
#rep=10, err.fct="ce", linear.output=FALSE))
# https://stat.ethz.ch/R-manual/R-devel/library/base/html/expand.grid.html
binary_data <- data.frame(expand.grid(c(0,1), c(0,1), c(0,1)), AND, OR)
print(binary_data)
str(binary_data)
#print(net <- neuralnet(AND+OR~Var1+Var2+Var3, binary.data, hidden=0,
#rep=10, err.fct="ce", linear.output=FALSE))
# https://stat.ethz.ch/R-manual/R-devel/library/base/html/expand.grid.html
binary_data <- data.frame(expand.grid(c(0,1), c(0,1), c(0,1),c(0,1)), AND, OR)
print(binary_data)
str(binary_data)
#print(net <- neuralnet(AND+OR~Var1+Var2+Var3, binary.data, hidden=0,
#rep=10, err.fct="ce", linear.output=FALSE))
# https://stat.ethz.ch/R-manual/R-devel/library/base/html/expand.grid.html
#binary_data <- data.frame(expand.grid(c(0,1), c(0,1), c(0,1),c(0,1)), AND, OR)
binary_data <- data.frame(expand.grid(c(0,1), c(0,1), c(0,1)), AND, OR)
print(binary_data)
str(binary_data)
#print(net <- neuralnet(AND+OR~Var1+Var2+Var3, binary.data, hidden=0,
#rep=10, err.fct="ce", linear.output=FALSE))
# https://stat.ethz.ch/R-manual/R-devel/library/base/html/expand.grid.html
print(net <- neuralnet(AND+OR~Var1+Var2+Var3, binary.data, hidden=0,rep=10, err.fct="ce", linear.output=FALSE))
print(net <- neuralnet(AND+OR~Var1+Var2+Var3, binary_data, hidden=0,rep=10, err.fct="ce", linear.output=FALSE))
plot(net, rep="best")
neuralnet()
?neuralnet()
library(nnet)
library(neuralnet)
head(iris)
str(iris)
# Start off with a Basic dataset - the good ol - IRIS
trainData <- cbind(iris[, 1:4], class.ind(iris$Species))
# Column Bind the 1 to 4 Columns Range
# Create a INDEX using the iris$Species Variable
#
# Create a SAMPLE Creation helper
samp<-c(sample(1:50,25), sample(51:100,25), sample(101:150,25))
## Code Source -- https://rweb.stat.umn.edu/R/library/nnet/html/predict.nnet.html
#Building ANN
library(neuralnet)
nn_iris<-neuralnet(setosa + versicolor + virginica ~ Sepal.Length + Sepal.Width + Petal.Length
+ Petal.Width,
trainData[samp,], hidden = c(5,5), threshold = 0.01,
stepmax = 1e+05, algorithm = "rprop+",
err.fct = "sse", act.fct = "logistic")
#Plotting the Model
#
plot(nn_iris)
nn_iris
nn_iris_1<-neuralnet(setosa + versicolor + virginica ~ Sepal.Length + Sepal.Width + Petal.Length
+ Petal.Width,
trainData[samp,], hidden = c(5,3), threshold = 0.01,
stepmax = 1e+05, algorithm = "rprop+",
err.fct = "sse", act.fct = "logistic",rep="best") ## Added -- rep=="best" , hidden == c(5,3)
nn_iris_1<-neuralnet(setosa + versicolor + virginica ~ Sepal.Length + Sepal.Width + Petal.Length
+ Petal.Width,
trainData[samp,], hidden = c(5,3), threshold = 0.01,
stepmax = 1e+05, algorithm = "rprop+",
err.fct = "sse", act.fct = "logistic",rep="5") ## Added -- rep=="5" , hidden == c(5,3)
nn_iris_1<-neuralnet(setosa + versicolor + virginica ~ Sepal.Length + Sepal.Width + Petal.Length
+ Petal.Width,
trainData[samp,], hidden = c(5,3), threshold = 0.01,
stepmax = 1e+05, algorithm = "rprop+",
err.fct = "sse", act.fct = "logistic",rep=5) ## Added -- rep=="5" , hidden == c(5,3)
#Plotting the Model
#
plot(nn_iris_1)
nn_iris
set.seed(123)
nn_iris_1<-neuralnet(setosa + versicolor + virginica ~ Sepal.Length + Sepal.Width + Petal.Length
+ Petal.Width,
trainData[samp,], hidden = c(5,3), threshold = 0.01,
stepmax = 1e+05, algorithm = "rprop+",
err.fct = "sse", act.fct = "logistic",rep=5) ## Added -- rep=="5" , hidden == c(5,3)
#Plotting the Model
#
plot(nn_iris_1,col.out = blue )
set.seed(123)
nn_iris_1<-neuralnet(setosa + versicolor + virginica ~ Sepal.Length + Sepal.Width + Petal.Length
+ Petal.Width,
trainData[samp,], hidden = c(5,3), threshold = 0.01,
stepmax = 1e+05, algorithm = "rprop+",
err.fct = "sse", act.fct = "logistic",rep=5) ## Added -- rep=="5" , hidden == c(5,3)
#Plotting the Model
#
plot(nn_iris_1,col.out = "red")
nn_iris
# STEPS == 1614
# ERROR == 0.01052
set.seed(123)
nn_iris_1<-neuralnet(setosa + versicolor + virginica ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width,
trainData[samp,], hidden = c(5,3), threshold = 0.01, stepmax = 1e+05, algorithm = "rprop+",
err.fct = "sse", act.fct = "logistic",rep=5 , linear.output = FALSE) ## Added -- rep=="5" , hidden == c(5,3)
#Plotting the Model
#
plot(nn_iris_1,col.out = "red")
nn_iris
### Seems setting seed - does not work - keep getting different
# STEPS and ERROR as seen below --
# STEPS == 1614
# ERROR == 0.01052
# STEPS == 1938
# ERROR == 0.003109
# Seen in the PLOT :-
#
# Black lines are connections between each layer,
# Figures seen on connections are weights ,
# The Circles with Figure 1 in them and the blue lines show "bias terms".
#
set.seed(123)
## ANN - 3
nn_iris_2<-neuralnet(setosa + versicolor + virginica ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width,
trainData[samp,], hidden = c(5,3,3), threshold = 0.01, stepmax = 1e+05, algorithm = "rprop+",
err.fct = "sse", act.fct = "logistic",rep=3 , linear.output = FALSE) ## Added -- rep=="3" , hidden == c(5,3,3)
#Plotting the Model
#
plot(nn_iris_2,col.entry="blue",col.hidden="green",col.out = "red")
nn_iris_2
### Seems setting seed - does not work - keep getting different
# STEPS and ERROR as seen below --
# STEPS == 1614
# ERROR == 0.01052
# STEPS == 1938
# ERROR == 0.003109
# STEPS == 446
# ERROR == 0.00107
# Seen in the PLOT :-
#
# Black lines are connections between each layer,
# Figures seen on connections are weights ,
# The Circles with Figure 1 in them and the blue lines show "bias terms".
#
plot(nn_iris_2,col.entry="blue",col.hidden="green",col.out = "red")
nn_iris_2
